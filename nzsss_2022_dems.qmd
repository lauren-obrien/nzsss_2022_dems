---
title: "Preparing DEMs for soil mapping"
bibliography: references.bib
---

## Introduction

This document runs through some lidar DEM preparation steps that can be helpful when modelling soils and landscapes.

### Demo data

I am using a demonstration dataset that Pierre Roudier has kindly made available in his R package '[hillshader](https://github.com/pierreroudier/hillshader)'. The dataset `maungawhau_hr` is a 1Â m resolution DEM of Maungawhau, in Auckland.

```{r}
# use the dev versions from github for terra and hillshader
library(tidyverse)
library(sf)
library(terra)
library(leaflet)
library(scico)
library(hillshader) 
library(ggspatial)
library(patchwork)
library(extrafont)  # optional
loadfonts(quiet = TRUE)
```

```{r}
mw <- rast(maungawhau_hr)
mw

# generate a quick hillshade for visualisation
mw_hs <- hillshader(raster::raster(mw))
mw_hs <- rast(mw_hs)
crs(mw_hs) <- crs(mw) # loop through raster breaks proj string :/
```

```{r}
#| echo: false
#| column: screen
  
pal_30 <- scico(30, palette = 'batlow')
palg <- scico(256, palette = 'grayC', direction = -1)

leaflet() |>
  addTiles() |>
  addRasterImage(mw_hs, opacity = 0.5, colors = palg, group = 'elevation') |>
  addRasterImage(mw, opacity = 0.5, colors = pal_30, group = 'elevation')|> 
  addLayersControl(overlayGroups = 'elevation') 

# todo - add a couple of A-B profile line plots?
```

### Noise removal

Most high-resolution DEMs have a certain amount of local surface roughness. Some of that is random noise, some of it is related to vegetation patterns (like grassed areas) or landscape alterations (like tillage marks), and some is left over from standard production steps like building removal. The variability often only ranges across a few centimetres, but it can cause exaggerated and messy results when calculating slope and other derived parameters.

Much of this noise can be removed using the Feature Preserving Smoothing method of @lindsay2019, available in the [WhiteBoxTools](https://www.whiteboxgeo.com/) (WBT) geospatial data analysis platform. This software can be used on the command line or accessed in programming environments using wrapper packages. One such package exists for R:

```{r}
library(whitebox)
```

Unfortunately `whitebox` can't directly consume in-memory R objects, so we must write the DEM to an on-disk file that it can access:

```{r}
writeRaster(mw, file.path('outputs', 'maungawhau_hr.tif'), 
            datatype = 'FLT4S', gdal = ('COMPRESS=LZW'),
            overwrite = TRUE)
```

Now we can denoise. The default settings for the Feature Preserving Smoothing tool have been shown to be effective in a broad range of situations, so let's apply them here:

```{r}
wbt_feature_preserving_smoothing(
  dem       = file.path('outputs', 'maungawhau_hr.tif'),
  output    = file.path('outputs', 'maungawhau_hr_FPS.tif'),
  filter    = 11,
  norm_diff = 15,
  num_iter  = 3,
  max_diff  = 0.5,
  wd = getwd(),
  compress_rasters = TRUE
)

mw_fps <- rast(file.path('outputs', 'maungawhau_hr_FPS.tif'))
```

The effect of this tool is quite subtle; the easiest way to quickly check the output is visually, by comparing before-and-after hillshades:

```{r}
mw_fps_hs <- hillshader(raster::raster(mw_fps))
mw_fps_hs <- rast(mw_fps_hs)
crs(mw_fps_hs) <- crs(mw_fps) 
```

Use the layer controls to switch between hillshades and zoom in for more detail:

```{r}
#| column: screen-inset
#| echo: false

api_key = 'c01ghf7ejgy4hdtnxght97yg185' # get your own at https://basemaps.linz.govt.nz/
leaflet() %>%
  addTiles(urlTemplate = paste0("https://basemaps.linz.govt.nz/v1/tiles/aerial/WebMercatorQuad/{z}/{x}/{y}.webp?api=", api_key),
           attribution = "(c) 2021 Land Information New Zealand",
           group = 'Base Image') %>% 
  addRasterImage(x = mw_hs, 
                 opacity = 1, 
                 colors = grey(0:255/256),
                 group = 'Hillshade - original') %>% 
  addRasterImage(x = mw_fps_hs, 
                 opacity = 1, 
                 colors = grey(0:255/256),
                 group = 'Hillshade - cleaned') %>% 
  addLayersControl(baseGroups = 'Base Image',
                   overlayGroups = c('Hillshade - original',
                                     'Hillshade - cleaned'),
                   options = layersControlOptions(collapsed = FALSE))  %>% 
  hideGroup(c('Hillshade - cleaned'))
```

Zooming in on Tahaki Reserve, the results clearly show a smoother surface post-processing, without the loss of larger scale structure that can occur when denoising using low-pass filters.

```{r}
#| echo: false

hss <- rast(list("Before" = mw_hs, "After" = mw_fps_hs)) |>
  crop(y = ext(c('xmin' = 2667500, 'xmax' = 2667650,
                 'ymin' = 6479375,  'ymax' = 6479525))) |>
  as.data.frame(xy = TRUE, na.rm = FALSE) |>
  pivot_longer(cols = c(Before, After),
               names_to = 'maplayer', values_to = 'value') |>
  mutate(maplayer = factor(maplayer, levels = c('Before', 'After'), ordered = TRUE))

zoom_1 <-
ggplot(hss) +
  geom_raster(aes(x = x , y = y, fill = value, group = maplayer),
              show.legend = FALSE) +
  annotate(geom = 'rect', 
           'xmin' = 2667500, 'xmax' = 2667650,
           'ymin' = 6479375,  'ymax' = 6479525,
           colour = 'grey20', fill = NA) +
  scale_fill_gradient(low = '#000000', high = "#ffffff") +
  facet_wrap(~maplayer) +
  theme_void() +
  theme(text = element_text(family = 'Ebrima',
                            size = 18)) +
  coord_equal()

#ggsave(
#  file.path('figures', 'DEM_zoom_01.png'),
#  plot = zoom_1, bg = 'white')

zoom_1
```

Another way to verify the effect is to look at slope values:

```{r}
#| echo: false
mw_slp <- terrain(mw) # slope is the default
mw_fps_slp <- terrain(mw_fps)

slope_rcl <-
  matrix(c(-Inf,   3, 1L,
              3,   7, 2L,
              7,  11, 3L, 
             11,  15, 4L,
             15,  25, 5L,
             25,  35, 6L,
             35,  42, 7L,
             42,  60, 8L,
             60, Inf, 9L), ncol = 3, byrow = TRUE)

mw_slp_cl <- classify(mw_slp, slope_rcl)
mw_slp_fps_cl <- classify(mw_fps_slp, slope_rcl)

class_labels <- tribble(~ID, ~slope_class,
                         1L,       'A',
                         2L,       'B',
                         3L,      'C-',
                         4L,      'C+',
                         5L,       'D',
                         6L,       'E',
                         7L,       'F',
                         8L,       'G',
                         9L,       'H')
levels(mw_slp_cl) <- levels(mw_slp_fps_cl) <- as.data.frame(class_labels)
```

```{r}
#| column: screen-inset
#| echo: false

pal_09 <- scico(9, palette = 'batlow')

leaflet() %>%
  addTiles(urlTemplate = paste0("https://basemaps.linz.govt.nz/v1/tiles/aerial/WebMercatorQuad/{z}/{x}/{y}.webp?api=", api_key),
           attribution = "(c) 2021 Land Information New Zealand",
           group = 'Base Image') %>% 
  addRasterImage(x = mw_slp_cl, 
                 opacity = 1, 
                 colors = pal_09,
                 group = 'Slope class - original') %>% 
  addRasterImage(x = mw_slp_fps_cl, 
                 opacity = 1, 
                 colors = pal_09,
                 group = 'Slope class - cleaned') %>% 
  addLayersControl(baseGroups = 'Base Image',
                   overlayGroups = c('Slope class - original',
                                     'Slope class - cleaned'),
                   options = layersControlOptions(collapsed = FALSE)) %>% 
  hideGroup(c('Slope class - cleaned'))
```

Post-processing, slope category patches have smoother edges and a more coherent structure, with less speckling.

### Aggregation

To show the effects of calculating derivatives before and after aggregation:

```{r}

mw_fps_10 <- aggregate(mw_fps, 10, cores = 3)

mw_fps_slp_10 <- terrain(mw_fps_10) 

# we already calculated 1m slope above in `mw_fps_slp`, now agg:
mw_fps_slp_10b <- aggregate(mw_fps_slp, 10, cores = 3)

# another thing we can do is take a focal mean at the target resolution
# before aggregating
circ10 <- focalMat(mw, 4, type = 'circle') # 9x9 cells - must be odd
mw_fps_slp_fm10 <- focal(mw_fps_slp, w = circ10, fun = 'mean')
mw_fps_slp_10c <- aggregate(mw_fps_slp_fm10, 10, cores = 3)

slps_10 <- c(mw_fps_slp_10, mw_fps_slp_10b, mw_fps_slp_10c)
names(slps_10) <- c('Aggregate First', 'Derive First', 'Derive and Smooth')

hss_10_af <- hillshader(raster::raster(slps_10[[1]]))
hss_10_af <- rast(hss_10_af)
crs(hss_10_af) <- crs(slps_10)

# leaflet

```

Its clear that aggregating first preserves far less detail as cell size increases. However, deriving first produces a noisier map that may have some unrealistic local changes in slope. This is where a low-pass filter actually becomes useful.

```{r}
# summary stats
summary(values(slps_10[[1]]), na.rm = TRUE)
summary(values(slps_10[[2]]), na.rm = TRUE)
summary(values(slps_10[[3]]), na.rm = TRUE)

hist(values(slps_10[[1]]), na.rm = TRUE)
hist(values(slps_10[[2]]), na.rm = TRUE)
hist(values(slps_10[[3]]), na.rm = TRUE)
```

### ROTO

data prepped earlier, just plotting:

```{r}
# prepped earlier off some of the horizons pg DSM
kumeroa_hs <- rast('inputs/Kumeroa_HSH_1m.tif')
kumeroa <- rast('inputs/Kumeroa_DSM_1m.tif')

kumeroa_roto_hs <- rast('inputs/Kumeroa_ROTO_FPS_HSH_1m.tif')
kumeroa_roto <- rast('inputs/Kumeroa_ROTO_FPS_DSM_1m.tif')

# leaflet
```

slope vis

```{r}
kumeroa_slp <- terrain(kumeroa)
kumeroa_roto_slp <- terrain(kumeroa_roto)
k_slps <- rast(list(kumeroa_slp, kumeroa_roto_slp))
names(k_slps) <- c('Before', 'After')
```

```{r}

# leaflet
```

zonal stats on the slope DEM

make zones from more general slope classes:

```{r}
k_slp_rcl <- matrix(c(-Inf, 10, 1,
                    10, 25, 2,
                    25, Inf, 3), byrow =TRUE, ncol = 3)

k_slp_zn <- classify(kumeroa_slp, k_slp_rcl)

zonal(kumeroa_slp, k_slp_zn, fun = mean)

#slope     slope
#1     1  4.919757
#2     2 16.514377
#3     3 41.061947

zonal(kumeroa_roto_slp, k_slp_zn, fun = mean) 

#  slope     slope
#1     1  2.833946
#2     2 14.721392
#3     3 30.537655

# more sensibly, ncells on the full slope classification

k_slp_rcl_2 <- matrix(c(  -Inf,   3, 1, # 'A'
                             3,   7, 2, # 'B'
                             7,  11, 3, # 'C-'
                            11,  15, 4, # 'C+'
                            15,  25, 5, # 'D'
                            25,  35, 6, # 'E'
                            35,  42, 7, # 'F'
                            42, Inf, 8  # 'G'
                          ), ncol = 3, byrow = TRUE)

k_slp_zn <- classify(kumeroa_slp, k_slp_rcl_2)
k_roto_slp_zn <- classify(kumeroa_roto_slp, k_slp_rcl_2)

freq(k_slp_zn)

freq(k_roto_slp_zn)



```
